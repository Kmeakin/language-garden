-- Combinators

-- The polymorphic identity function
--
-- Also known as the ‘I combinator’ in [combinatory logic].
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
let id : fun (A : Type) -> A -> A :=
  fun _ a := a;

-- A function that always returns the same value
--
-- Also known as the ‘C combinator’ in [combinatory logic].
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
let always : fun (A : Type) (B : Type) -> A -> B -> A :=
  fun _ _ a _ := a;

-- Flip the order of the first two inputs to a function
--
-- Also known as the ‘T combinator’ in [combinatory logic].
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
let flip : fun (A : Type) (B : Type) (C : Type) -> (A -> B -> C) -> (B -> A -> C) :=
  fun _ _ _ a-b-c :=
    fun b a := a-b-c a b;

-- Connect the outputs of one function to the inputs of another function
--
-- Also known as the ‘Z combinator’ in [combinatory logic].
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
let compose : fun (A : Type) (B : Type) (C : Type) -> (A -> B) -> (B -> C) -> (A -> C) :=
  fun _ _ _ a-b b-c :=
    fun a := b-c (a-b a);

-- Fuse two functions with the same input.
--
-- Also known as the ‘S combinator’ in [combinatory logic].
--
-- # References
--
-- * [Why is the S combinator an S?][s-combinator-blog]
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
-- [s-combinator-blog]: https://blog.plover.com/math/combinator-s.html
let fuse : fun (A : Type) (B : Type) (C : Type) -> (A -> B -> C) -> (A -> B) -> (A -> C) :=
  fun _ _ _ a-b-c a-b :=
    fun a := a-b-c a (a-b a);


-- Dependent Combinators

-- Flip the order of the first two inputs to a dependent function
--
-- Also known as the ‘T combinator’ in [combinatory logic].
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
let dep-flip :
  fun (A : Type) (B : Type) (C : A -> B -> Type) ->
  fun (a-b-c : fun (a : A) (b : B) -> C a b) ->
    (fun (b : B) (a : A) -> C a b) :=
      fun _ _ _ a-b-c :=
        fun b a := a-b-c a b;

-- Dependent function composition
--
-- Also known as the ‘Z combinator’ in [combinatory logic].
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
let dep-compose :
  fun (A : Type) (B : A -> Type) (C : fun (a : A) -> B a -> Type) ->
  fun (a-b : fun (a : A) -> B a) ->
  fun (a-b-c : fun (a : A) (b : B a) -> C a b) ->
    (fun (a : A) -> C a (a-b a)) :=
      fun _ _ _ a-b a-b-c :=
        fun a := a-b-c a (a-b a);

-- Dependent fusion
--
-- Also known as the ‘S combinator’ in [combinatory logic].
--
-- # References
--
-- * [Outrageous but Meaningful Coincidences: Dependent type-safe syntax and evaluation][dep-rep]
--   (Described in Section 5 as an infix `_ˢ_` operator)
-- * [Why is the S combinator an S?][s-combinator-blog]
--
-- [combinatory logic]: https://en.wikipedia.org/wiki/Combinatory_logic
-- [dep-rep]: https://personal.cis.strath.ac.uk/conor.mcbride/pub/DepRep/DepRep.pdf
-- [s-combinator-blog]: https://blog.plover.com/math/combinator-s.html
let dep-fuse :
  fun (A : Type) (B : A -> Type) (C : fun (a : A) -> B a -> Type) ->
  fun (a-b-c : fun (a : A) (b : B a) -> C a b) ->
  fun (a-b : fun (a : A) -> B a) ->
    (fun (a : A) -> C a (a-b a)) :=
      fun _ _ _ a-b-c a-b :=
        fun a :=  a-b-c a (a-b a);


-- Abstract algebra

-- A carrier equipped with an associative operation
let Semigroup := {
  -- The carrier type
  Carrier : Type;
  -- The associative operation
  append : Carrier -> Carrier -> Carrier;
};


-- Category theory

let Category := {
  -- An object in the category
  Object : Type;
  -- Arrows between the objects in the category
  Arrow : Object -> Object -> Type;
  -- The identity arrow
  id : fun (A : Object) -> Arrow A A;
  -- Compose two arrows
  compose : fun (A : Object) (B : Object) (C : Object) -> Arrow A B -> Arrow B C -> Arrow A C;
};

-- Category of types and functions
let type-category : Category := {
  Object := Type;
  Arrow := fun A B := A -> B;
  id := id;
  compose := compose;
};

-- Opposite category
let opposite-category : Category -> Category :=
  fun c := {
    Object := c.Object;
    Arrow := fun A B := c.Arrow B A;
    id := c.id;
    compose := fun A B C a-b b-c := c.compose C B A b-c a-b;
  };

-- A mapping from a source category into a target category.
let Functor := {
  -- The category to map from
  source : Category;
  -- The category to map into
  target : Category;
  -- Mapping from a source object into a target object
  Map : source.Object -> target.Object;
  -- Mapping from a source arrow into a target arrow
  map : fun (A : source.Object) (B : source.Object) ->
    (source.Arrow A B) ->
    (target.Arrow (Map A) (Map B));
};

-- A mapping from a category to itself.
let Endofunctor := {
  -- The category to map between
  self : Category;
  -- Mapping between objects in the category
  Map : self.Object -> self.Object;
  -- Mapping between arrows in the category
  map : fun (A : self.Object) (B : self.Object) -> (self.Arrow A B) -> (self.Arrow (Map A) (Map B));
};

-- An endofunctor is a functor where the source category is the same as the
-- target category.
let endofunctor-functor : Endofunctor -> Functor :=
  fun endofunctor := {
    source := endofunctor.self;
    target := endofunctor.self;
    Map := endofunctor.Map;
    map := endofunctor.map;
  };


-- Booleans

let Bool : Type :=
  fun (Out : Type) ->
    fun (true : Out) ->
    fun (false : Out) ->
      Out;

let true : Bool :=
  fun Out true false := true;

let false : Bool :=
  fun Out true false := false;


let not : Bool -> Bool :=
  fun b :=
    b Bool false true;


-- Natural numbers

let Nat : Type :=
  fun (Out : Type) ->
    fun (succ : Out -> Out) ->
    fun (zero : Out) ->
      Out;

let zero : Nat :=
  fun Out succ zero := zero;

let succ : Nat -> Nat :=
  fun prev :=
    fun Out succ zero :=
      succ (prev Out succ zero);


let add : Nat -> Nat -> Nat :=
  fun n0 n1 :=
    fun Out succ zero :=
      n0 Out succ (n1 Out succ zero);

let mul : Nat -> Nat -> Nat :=
  fun n0 n1 :=
    fun Out succ zero :=
      n0 Out (n1 Out succ) zero;


let nat-semigroup-add : Semigroup := {
  Carrier := Nat;
  append := add;
};

let nat-semigroup-mul : Semigroup := {
  Carrier := Nat;
  append := mul;
};



-- Lists

let List : Type -> Type :=
  fun Elem :=
    fun (Out : Type) ->
      fun (nil : Out) ->
      fun (cons : Elem -> Out -> Out) ->
        Out;

let nil : fun (Elem : Type) -> List Elem :=
  fun Elem :=
    fun Out nil cons := nil;

let cons : fun (Elem : Type) -> Elem -> List Elem -> List Elem :=
  fun Elem head tail :=
    fun Out nil cons :=
      cons head (tail Out nil cons);


let list-map : fun (A : Type) (B : Type) -> (A -> B) -> List A -> List B :=
  fun A B a-b as :=
    fun Out nil cons :=
      as Out nil (fun a bs := cons (a-b a) bs);


-- Vectors

let Vec : Type -> Nat -> Type :=
  fun Elem len :=
    fun (Out : Nat -> Type) ->
      fun (nil : Out zero) ->
      fun (cons : fun (len : Nat) -> Elem -> Out len -> Out (succ len)) ->
        Out len;

let vec-nil : fun (Elem : Type) -> Vec Elem zero :=
  fun Elem :=
    fun Out nil cons := nil;

let vec-cons : fun (Elem : Type) (len : Nat) -> Elem -> Vec Elem len -> Vec Elem (succ len) :=
  fun Elem len head tail :=
    fun Out nil cons :=
      cons len head (tail Out nil cons);


-- Void

let Void : Type :=
  fun (Out : Type) -> Out;

let absurd : fun (A : Type) -> Void -> A :=
  fun A void := void A;


-- Unit

let Unit : Type :=
  fun (Out : Type) ->
    fun (unit : Out) ->
      Out;

let unit : Unit :=
  fun Out unit := unit;


-- Leibniz equality

-- This states that two things of the same type are equal if every property of
-- one is also a property of the other.
let Eq : fun (A : Type) -> A -> A -> Type :=
  fun A a0 a1 :=
    fun (P : A -> Type) -> P a0 -> P a1;

let refl : fun (A : Type) (a : A) -> Eq A a a :=
  fun A a P := id (P a);


let trans : fun (A : Type) (a0 : A) (a1 : A) (a2 : A) ->
    Eq A a0 a1 -> Eq A a1 a2 -> Eq A a0 a2 :=
  fun A a0 a1 a2 p0 p1 :=
    fun P := compose (P a0) (P a1) (P a2) (p0 P) (p1 P);

let sym : fun (A : Type) (a0 : A) (a1 : A) -> Eq A a0 a1 -> Eq A a1 a0 :=
  fun A a0 a1 p :=
    p (fun a1 := Eq A a1 a0) (refl A a0);


-- Examples

let list1 : List Bool :=
  cons Bool (id Bool true) (nil Bool);

let five : Nat := succ (succ (succ (succ (succ zero))));
let ten : Nat := add five five;
let hundred : Nat := mul ten ten;
let thousand : Nat := mul ten hundred;

let eq-test : Eq Nat hundred hundred := refl Nat hundred;

let eq-id-elim-type : Eq Type ((id Type) Type) Type := refl Type Type;
let eq-id-elim-true : Eq Bool ((id Bool) true) true := refl Bool true;
let eq-id-elim-false : Eq Bool ((id Bool) false) false := refl Bool false;

let eq-list-map :
  Eq (List Nat)
    (list-map Bool Nat (fun b := b Nat zero five) (cons Bool false list1))
    (cons Nat five (cons Nat zero (nil Nat)))
:=
  refl (List Nat) (cons Nat five (cons Nat zero (nil Nat)));


--

-- TODO: return a record containing the contents of the prelude
Type
